// /*
//  * Project test2
//  * Description:
//  * Author: bx2150@columbia.edu
//  * Date:
//  */
// #define COMPILE_CYCLIC_EXPERIMENT true
// // compile this file if COMPILE_SOFT_MOTOR==true
// #if COMPILE_CYCLIC_EXPERIMENT
//
// #include "cwpack.h";
// // #include "cwpack_defines.h"
// #include "helper.h"
// #include <application.h>
// #include "ADS1115.h"
// #include "Adafruit_PCA9685.h"
// #include "TCA9548A-RK.h"
// // #include <spark_wiring_i2c.h>
//
// #define THERMISTOR_FLAG 6 // identification code for thermistor value message
//
// // UDP Port used for two way communication
// #define REMOTE_PORT 9071 // the port Photon will send message to
// #define LOCAL_PORT 8888  // the receiving port on the Photon
// #define BUFFER_SIZE 64
// UDP udp;// An UDP instance to let us send and receive packets over UDP
//
//
// IPAddress remoteIP(192, 168, 0, 3);
//
// unsigned char buff[BUFFER_SIZE];
// cw_unpack_context uc;
// cw_pack_context pc;
//
// #define NUM_RELAY 1
// int RELAY[] = {A4};
// int RELAY_PWM[] = {0};
// /////////////////////////////////////////
// #define NUM_THERMISTER 1
// #define UPDATE_RATE_TEMPERATURE 1
// #define send_buffer_len NUM_THERMISTER * 5 + 8
//
// float KEEP_RATE_TEMPERATURE = 1 - UPDATE_RATE_TEMPERATURE;
//
// float PULL_DOWN_RESISTORS[] = {4735};
// // float THERMISTER_WIRE_OHMS[NUM_THERMISTER] = {1.3,1.2,1.2};
// float THERMISTER_WIRE_OHMS[] = {1.2};
// // float THERMISTER_WIRE_OHMS[]={0.8,0.8,0.8,0.8,0};
// float TEMPERATURE[] = {20,20,20};
// uint8_t send_buffer[send_buffer_len];
// //////////////////////////////////////////////////////
// PCA9685 ledDriver = PCA9685(0x40, false);  // Use the default address, turn off debugging
//
// /////////////////////////////////////////////////////
// // I2c multiplexer
// TCA9548A mux(Wire, 0);
// ////////////////////////////////////////////////////
// #define adcInterruptPin A3
//
//
// ADS1115 ads1115s[2] {{1, ADS1115_ADDRESS_ADDR_GND},
//                      {1, ADS1115_ADDRESS_ADDR_GND}};
//
// void ads1115CallbackHelper() {
//         // ads1115s[0].TimerCallBack();
//         mux.setChannel(0);
//         ads1115s[0].ReadADS1115();
//         mux.setChannel(1);
//         ads1115s[1].ReadADS1115();
//         // ads1115s[1].TimerCallBack();
// }
//
// //////////////////////////////////////////////////////////////////////////////
// WheatstonBridge wheatstonBridges[3]={
//         WheatstonBridge(1999,1999,1000.1),
//         WheatstonBridge(1999,1999,1000.1),
//         WheatstonBridge(2000,1999,1000.1)
// };
// // float thermistors_ohm_at_0[3] = {999.6,1002,1000};
// float thermistors_ohm_at_0[3] = {1002,1002,1000};
//
// int * voltage_3_3v_adc;
// //////////////////////////////////////////////////////////////////////////////
// unsigned long timePrevious = 0;
// unsigned int callbackInterval = 10;
//
//
// Timer timer_debug(1000, timerCallBack);
// Timer timer2(40, ReportTemperature);
// // Timer timerADS1115(21,ads1115CallbackHelper);
// // setup() runs once, when the device is first turned on.
// void setup() {
//         // for (size_t i = 0; i < NUM_THERMISTER; i++) {
//         // thermistors_ohm_at_0[i] -= THERMISTER_WIRE_OHMS[i];
//         // }
//         // Initialise I2C communication as MASTER
//         Wire.setSpeed(300000); // set clock speed [Hz]
//         Wire.begin();
//         delay(10);
//         mux.begin();
//         // preset
//         //int configNum,byte gain,byte mux,byte dataRate
//         mux.setChannel(0);
//         ads1115s[0].SetConfig(0,ADS1115_PGA_0_512V,ADS1115_MUX_DIFF_1_3,ADS1115_DR_128SPS,true);//gain=8
//         ads1115s[0].SendConfig(0);
//         // ads1115s[0].SetConfig(1,ADS1115_PGA_0_512V,ADS1115_MUX_DIFF_1_3,ADS1115_DR_250SPS,false);
//         // ads1115s[0].SetConfig(2,ADS1115_PGA_0_512V,ADS1115_MUX_DIFF_2_3,ADS1115_DR_250SPS,false);//gain=8
//         // ads1115s[0].adc[NUM_THERMISTER] = 26400;//correspond to 3.3v at ADS1115_PGA_4_096V
//         mux.setChannel(1);
//         ads1115s[1].SetConfig(0,ADS1115_PGA_4_096V,ADS1115_MUX_SINGLE_0,ADS1115_DR_128SPS,true);//gain=8
//         ads1115s[1].SendConfig(0);
//         ads1115s[1].adc[0] = 26400;//correspond to 3.3v at ADS1115_PGA_4_096V
//         voltage_3_3v_adc = &(ads1115s[1].adc[0]);
//         // this part requires Wire.begin()
//         // ads1115s[0].InterruptSetup();
//         // attachInterrupt(adcInterruptPin, ads1115CallbackHelper, FALLING);
//         // ads1115s[0].SendConfig(0);
//         // delay(10);
//       //  timerADS1115.start();
//         ////////////////////////////////////////////////
//         ledDriver.begin(); // This calls Wire.begin()
//         ledDriver.setPWMFreq(1500); // Maximum PWM frequency is 1520
//
//         /////////////////////////////////////
//         cw_unpack_context_init(&uc, buff, BUFFER_SIZE, 0);
//         Particle.function("myHandler", myHandler);
//         Particle.function("getLocalIP", getLocalIP);
//         // Put initialization like pinMode and begin functions here.
//         for (int i = 0; i < NUM_RELAY; i++) {
//                 pinMode(RELAY[i], OUTPUT);
//                 digitalWrite(RELAY[i], LOW);
//         }
//         udp.begin(REMOTE_PORT);
//         udp.begin(LOCAL_PORT);
//         // timer_debug.start();
//         timer2.start();
//         Serial.begin(9600);
// }
//
// // loop() runs over and over again, as quickly as it can execute.
// void loop() {
//
//         if (millis()>callbackInterval+timePrevious) {
//           timePrevious = millis();
//           // ads1115CallbackHelper();
//           // ads1115s[0].SendConfig(0);
//           mux.setChannel(0);
//           ads1115s[0].adc[0] = ads1115s[0].ReadADS1115();
//           // ads1115s[1].SendConfig(0);
//           mux.setChannel(1);
//           ads1115s[1].adc[0] = ads1115s[1].ReadADS1115();
//         }
//
//
//
//         int packetSize = udp.parsePacket();
//         // Check if data has been received
//         if (packetSize > 0) {
//                 // // While we have characters to read read them
//                 udp.read(buff, BUFFER_SIZE);
//                 // Null terminate (needed for atoi)
//                 // buff[packetSize] = '\0';
//                 // Serial.printlnf((const char*)buff);
//                 //printHex(buff,BUFFER_SIZE);
//                 cw_unpack_context_init(&uc, buff, packetSize, 0);
//                 // cw_unpack_next(&uc);
//                 // if (uc.item.type == CWP_ITEM_ARRAY && uc.item.as.array.size == 2){
//                 if (UnpackCheckArray(&uc, 2)) {
//                         if (UnpackCheckU8(&uc, 7)) {
//                                 // printHex(&uc.item.as.u8,1);
//                                 cw_unpack_next(&uc);
//                                 if (uc.item.type == CWP_ITEM_ARRAY) {
//                                         int num = uc.item.as.array.size;
//                                         for (int relayIndex = 0; relayIndex < num; relayIndex++) {
//                                                 cw_unpack_next(&uc);
//                                                 // int value = (int)uc.item.as.u8;
//                                                 // at 2048 Hz
//                                                 // analogWrite(RELAY[relayIndex], uc.item.as.u8, 2048);
//
//                                                 ledDriver.setVal(relayIndex, uc.item.as.u8*4);
//
//                                                 //Serial.println((int)uc.item.as.u8);
//                                         }
//                                 }
//                         }
//                 }
//                 // printHex(buff,packetSize);
//
//                 // Ignore other chars
//                 udp.flush();
//                 // Reset out buffer
//         }
// }
//
// int myHandler(String command) {
//         int commaIndex = command.indexOf(",");
//         Serial.println(WiFi.localIP());
//         int relayIndex = command.substring(0, commaIndex + 1).toInt();
//         int value = command.substring(commaIndex + 1).toInt();
//         if ((relayIndex < NUM_RELAY) && relayIndex >= 0) {
//                 analogWrite(RELAY[relayIndex], value, 256);
//         }
//         return 0;
// }
//
// void udpSend(uint8_t * outbuff, int size) {
//         if (udp.sendPacket(outbuff, size, remoteIP, REMOTE_PORT) < 0) {
//                 Particle.publish("Error");
//         }
// }
// uint8_t out_buff[] = {0x11, 0x12, 0x13, 0x14};
// void timerCallBack() {
//         udpSend(out_buff, sizeof(out_buff));
//         Serial.println("packet sent");
// }
//
//
// void ReportTemperature() {
//         for (int i = 0; i < NUM_THERMISTER; i++) {
//                 //   int thermister_analog = ads1115s[0].adc[i];
//                 float thermistor_ohm = wheatstonBridges[i].getR2(*voltage_3_3v_adc,ads1115s[0].adc[i],8) - THERMISTER_WIRE_OHMS[i];
//                 float temperature = (thermistor_ohm/thermistors_ohm_at_0[i]-1)/0.00385;
//                 if(temperature<400) {
//                         TEMPERATURE[i] = temperature;
//                 }else{
//                         // Serial.printlnf("Bad reading:%.2f\n",temperature);
//                 }
//
//                 // float thermister_ohm =
//                 //         ((float)ads1115s[0].adc[NUM_THERMISTER] / (float)ads1115s[0].adc[i] - 1) * PULL_DOWN_RESISTORS[i] -
//                 //         THERMISTER_WIRE_OHMS[i];
//                 // TEMPERATURE[i] =
//                 //         KEEP_RATE_TEMPERATURE * TEMPERATURE[i] +
//                 //         UPDATE_RATE_TEMPERATURE * multiMap(thermister_ohm, ohms, tempCs, 166);
//                 Serial.print(TEMPERATURE[i]);
//                 Serial.print('\t');
//                 // Serial.printf("%.2f\t", TEMPERATURE[i]);
//                 //Serial.printf("%.2f\t", thermistor_ohm);
//         }
//         Serial.printf("\t\t");
//         Serial.printf("%5d\t%5d\t%5d\t%5d\t\t%5d\n", ads1115s[0].adc[0], ads1115s[0].adc[1], ads1115s[0].adc[2], ads1115s[0].adc[3],ads1115s[1].adc[0]);
//
//
//         cw_pack_context_init(&pc, send_buffer, send_buffer_len, 0);
//         cw_pack_array_size(&pc, 3);
//         // 3 element: [message_type],[command],[unsigned long millis()]
//         // command for temperature:float[]:[t1,t2,t3,...]
//         // cw_pack_float(&pc,((float)millis())/1000);
//         cw_pack_unsigned(&pc, THERMISTOR_FLAG);
//         cw_pack_array_size(&pc, NUM_THERMISTER);
//         for (int i = 0; i < NUM_THERMISTER; i++) {
//                 cw_pack_float(&pc, TEMPERATURE[i]);
//         }
//         cw_pack_unsigned(&pc, millis());
//         udpSend(send_buffer, pc.current - pc.start);
// }
//
// #endif
